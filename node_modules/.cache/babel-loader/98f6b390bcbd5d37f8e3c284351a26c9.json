{"remainingRequest":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\babel-loader\\lib\\index.js!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\src\\components\\ThemePicker\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\src\\components\\ThemePicker\\index.vue","mtime":1725789930785},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\babel.config.js","mtime":1725789930622},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/Language/Go/Project/Test/test/go_gateway_view/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.number.constructor\");\nrequire(\"core-js/modules/es6.regexp.to-string\");\nvar _regeneratorRuntime2 = _interopRequireDefault(require(\"E:/Language/Go/Project/Test/test/go_gateway_view/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\"));\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.regexp.constructor\");\nrequire(\"core-js/modules/es6.regexp.replace\");\nrequire(\"regenerator-runtime/runtime\");\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"E:/Language/Go/Project/Test/test/go_gateway_view/node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar version = require('element-ui/package.json').version; // element-ui version from node_modules\nvar ORIGINAL_THEME = '#409EFF'; // default color\nvar _default = exports.default = {\n  data: function data() {\n    return {\n      chalk: '',\n      // content of theme-chalk css\n      theme: ''\n    };\n  },\n  computed: {\n    defaultTheme: function defaultTheme() {\n      return this.$store.state.settings.theme;\n    }\n  },\n  watch: {\n    defaultTheme: {\n      handler: function handler(val, oldVal) {\n        this.theme = val;\n      },\n      immediate: true\n    },\n    theme: function () {\n      var _theme = (0, _asyncToGenerator2.default)(/*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee(val) {\n        var _this = this;\n        var oldVal, themeCluster, originalCluster, $message, getHandler, url, chalkHandler, styles;\n        return (0, _regeneratorRuntime2.default)().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              oldVal = this.chalk ? this.theme : ORIGINAL_THEME;\n              if (!(typeof val !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 3:\n              themeCluster = this.getThemeCluster(val.replace('#', ''));\n              originalCluster = this.getThemeCluster(oldVal.replace('#', ''));\n              console.log(themeCluster, originalCluster);\n              $message = this.$message({\n                message: '  Compiling the theme',\n                customClass: 'theme-message',\n                type: 'success',\n                duration: 0,\n                iconClass: 'el-icon-loading'\n              });\n              getHandler = function getHandler(variable, id) {\n                return function () {\n                  var originalCluster = _this.getThemeCluster(ORIGINAL_THEME.replace('#', ''));\n                  var newStyle = _this.updateStyle(_this[variable], originalCluster, themeCluster);\n                  var styleTag = document.getElementById(id);\n                  if (!styleTag) {\n                    styleTag = document.createElement('style');\n                    styleTag.setAttribute('id', id);\n                    document.head.appendChild(styleTag);\n                  }\n                  styleTag.innerText = newStyle;\n                };\n              };\n              if (this.chalk) {\n                _context.next = 12;\n                break;\n              }\n              url = \"https://unpkg.com/element-ui@\".concat(version, \"/lib/theme-chalk/index.css\");\n              _context.next = 12;\n              return this.getCSSString(url, 'chalk');\n            case 12:\n              chalkHandler = getHandler('chalk', 'chalk-style');\n              chalkHandler();\n              styles = [].slice.call(document.querySelectorAll('style')).filter(function (style) {\n                var text = style.innerText;\n                return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text);\n              });\n              styles.forEach(function (style) {\n                var innerText = style.innerText;\n                if (typeof innerText !== 'string') return;\n                style.innerText = _this.updateStyle(innerText, originalCluster, themeCluster);\n              });\n              this.$emit('change', val);\n              $message.close();\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function theme(_x) {\n        return _theme.apply(this, arguments);\n      }\n      return theme;\n    }()\n  },\n  methods: {\n    updateStyle: function updateStyle(style, oldCluster, newCluster) {\n      var newStyle = style;\n      oldCluster.forEach(function (color, index) {\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index]);\n      });\n      return newStyle;\n    },\n    getCSSString: function getCSSString(url, variable) {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4 && xhr.status === 200) {\n            _this2[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '');\n            resolve();\n          }\n        };\n        xhr.open('GET', url);\n        xhr.send();\n      });\n    },\n    getThemeCluster: function getThemeCluster(theme) {\n      var tintColor = function tintColor(color, tint) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n        if (tint === 0) {\n          // when primary color is in its rgb space\n          return [red, green, blue].join(',');\n        } else {\n          red += Math.round(tint * (255 - red));\n          green += Math.round(tint * (255 - green));\n          blue += Math.round(tint * (255 - blue));\n          red = red.toString(16);\n          green = green.toString(16);\n          blue = blue.toString(16);\n          return \"#\".concat(red).concat(green).concat(blue);\n        }\n      };\n      var shadeColor = function shadeColor(color, shade) {\n        var red = parseInt(color.slice(0, 2), 16);\n        var green = parseInt(color.slice(2, 4), 16);\n        var blue = parseInt(color.slice(4, 6), 16);\n        red = Math.round((1 - shade) * red);\n        green = Math.round((1 - shade) * green);\n        blue = Math.round((1 - shade) * blue);\n        red = red.toString(16);\n        green = green.toString(16);\n        blue = blue.toString(16);\n        return \"#\".concat(red).concat(green).concat(blue);\n      };\n      var clusters = [theme];\n      for (var i = 0; i <= 9; i++) {\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))));\n      }\n      clusters.push(shadeColor(theme, 0.1));\n      return clusters;\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <el-color-picker\r\n    v-model=\"theme\"\r\n    :predefine=\"['#409EFF', '#1890ff', '#304156','#212121','#11a983', '#13c2c2', '#6959CD', '#f5222d', ]\"\r\n    class=\"theme-picker\"\r\n    popper-class=\"theme-picker-dropdown\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nconst version = require('element-ui/package.json').version // element-ui version from node_modules\r\nconst ORIGINAL_THEME = '#409EFF' // default color\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      chalk: '', // content of theme-chalk css\r\n      theme: ''\r\n    }\r\n  },\r\n  computed: {\r\n    defaultTheme() {\r\n      return this.$store.state.settings.theme\r\n    }\r\n  },\r\n  watch: {\r\n    defaultTheme: {\r\n      handler: function(val, oldVal) {\r\n        this.theme = val\r\n      },\r\n      immediate: true\r\n    },\r\n    async theme(val) {\r\n      const oldVal = this.chalk ? this.theme : ORIGINAL_THEME\r\n      if (typeof val !== 'string') return\r\n      const themeCluster = this.getThemeCluster(val.replace('#', ''))\r\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))\r\n      console.log(themeCluster, originalCluster)\r\n\r\n      const $message = this.$message({\r\n        message: '  Compiling the theme',\r\n        customClass: 'theme-message',\r\n        type: 'success',\r\n        duration: 0,\r\n        iconClass: 'el-icon-loading'\r\n      })\r\n\r\n      const getHandler = (variable, id) => {\r\n        return () => {\r\n          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))\r\n          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)\r\n\r\n          let styleTag = document.getElementById(id)\r\n          if (!styleTag) {\r\n            styleTag = document.createElement('style')\r\n            styleTag.setAttribute('id', id)\r\n            document.head.appendChild(styleTag)\r\n          }\r\n          styleTag.innerText = newStyle\r\n        }\r\n      }\r\n\r\n      if (!this.chalk) {\r\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\r\n        await this.getCSSString(url, 'chalk')\r\n      }\r\n\r\n      const chalkHandler = getHandler('chalk', 'chalk-style')\r\n\r\n      chalkHandler()\r\n\r\n      const styles = [].slice.call(document.querySelectorAll('style'))\r\n        .filter(style => {\r\n          const text = style.innerText\r\n          return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text)\r\n        })\r\n      styles.forEach(style => {\r\n        const { innerText } = style\r\n        if (typeof innerText !== 'string') return\r\n        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)\r\n      })\r\n\r\n      this.$emit('change', val)\r\n\r\n      $message.close()\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    updateStyle(style, oldCluster, newCluster) {\r\n      let newStyle = style\r\n      oldCluster.forEach((color, index) => {\r\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\r\n      })\r\n      return newStyle\r\n    },\r\n\r\n    getCSSString(url, variable) {\r\n      return new Promise(resolve => {\r\n        const xhr = new XMLHttpRequest()\r\n        xhr.onreadystatechange = () => {\r\n          if (xhr.readyState === 4 && xhr.status === 200) {\r\n            this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\r\n            resolve()\r\n          }\r\n        }\r\n        xhr.open('GET', url)\r\n        xhr.send()\r\n      })\r\n    },\r\n\r\n    getThemeCluster(theme) {\r\n      const tintColor = (color, tint) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        if (tint === 0) { // when primary color is in its rgb space\r\n          return [red, green, blue].join(',')\r\n        } else {\r\n          red += Math.round(tint * (255 - red))\r\n          green += Math.round(tint * (255 - green))\r\n          blue += Math.round(tint * (255 - blue))\r\n\r\n          red = red.toString(16)\r\n          green = green.toString(16)\r\n          blue = blue.toString(16)\r\n\r\n          return `#${red}${green}${blue}`\r\n        }\r\n      }\r\n\r\n      const shadeColor = (color, shade) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        red = Math.round((1 - shade) * red)\r\n        green = Math.round((1 - shade) * green)\r\n        blue = Math.round((1 - shade) * blue)\r\n\r\n        red = red.toString(16)\r\n        green = green.toString(16)\r\n        blue = blue.toString(16)\r\n\r\n        return `#${red}${green}${blue}`\r\n      }\r\n\r\n      const clusters = [theme]\r\n      for (let i = 0; i <= 9; i++) {\r\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\r\n      }\r\n      clusters.push(shadeColor(theme, 0.1))\r\n      return clusters\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.theme-message,\r\n.theme-picker-dropdown {\r\n  z-index: 99999 !important;\r\n}\r\n\r\n.theme-picker .el-color-picker__trigger {\r\n  height: 26px !important;\r\n  width: 26px !important;\r\n  padding: 2px;\r\n}\r\n\r\n.theme-picker-dropdown .el-color-dropdown__link-btn {\r\n  display: none;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/ThemePicker"}]}