{"remainingRequest":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\babel-loader\\lib\\index.js!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\src\\layout\\components\\TagsView\\ScrollPane.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\src\\layout\\components\\TagsView\\ScrollPane.vue","mtime":1725789930865},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\babel.config.js","mtime":1725789930622},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.array.find-index\");\n//\n//\n//\n//\n//\n//\n\nvar tagAndTagSpacing = 4; // tagAndTagSpacing\nvar _default = exports.default = {\n  name: 'ScrollPane',\n  data: function data() {\n    return {\n      left: 0\n    };\n  },\n  computed: {\n    scrollWrapper: function scrollWrapper() {\n      return this.$refs.scrollContainer.$refs.wrap;\n    }\n  },\n  methods: {\n    handleScroll: function handleScroll(e) {\n      var eventDelta = e.wheelDelta || -e.deltaY * 40;\n      var $scrollWrapper = this.scrollWrapper;\n      $scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4;\n    },\n    moveToTarget: function moveToTarget(currentTag) {\n      var $container = this.$refs.scrollContainer.$el;\n      var $containerWidth = $container.offsetWidth;\n      var $scrollWrapper = this.scrollWrapper;\n      var tagList = this.$parent.$refs.tag;\n      var firstTag = null;\n      var lastTag = null;\n\n      // find first tag and last tag\n      if (tagList.length > 0) {\n        firstTag = tagList[0];\n        lastTag = tagList[tagList.length - 1];\n      }\n      if (firstTag === currentTag) {\n        $scrollWrapper.scrollLeft = 0;\n      } else if (lastTag === currentTag) {\n        $scrollWrapper.scrollLeft = $scrollWrapper.scrollWidth - $containerWidth;\n      } else {\n        // find preTag and nextTag\n        var currentIndex = tagList.findIndex(function (item) {\n          return item === currentTag;\n        });\n        var prevTag = tagList[currentIndex - 1];\n        var nextTag = tagList[currentIndex + 1];\n\n        // the tag's offsetLeft after of nextTag\n        var afterNextTagOffsetLeft = nextTag.$el.offsetLeft + nextTag.$el.offsetWidth + tagAndTagSpacing;\n\n        // the tag's offsetLeft before of prevTag\n        var beforePrevTagOffsetLeft = prevTag.$el.offsetLeft - tagAndTagSpacing;\n        if (afterNextTagOffsetLeft > $scrollWrapper.scrollLeft + $containerWidth) {\n          $scrollWrapper.scrollLeft = afterNextTagOffsetLeft - $containerWidth;\n        } else if (beforePrevTagOffsetLeft < $scrollWrapper.scrollLeft) {\n          $scrollWrapper.scrollLeft = beforePrevTagOffsetLeft;\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["ScrollPane.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAOA,IAAA,gBAAA,GAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,OAAA,GAEA;EACA,IAAA,EAAA,YAAA;EACA,IAAA,WAAA,IAAA,CAAA,EAAA;IACA,OAAA;MACA,IAAA,EAAA;IACA,CAAA;EACA,CAAA;EACA,QAAA,EAAA;IACA,aAAA,WAAA,aAAA,CAAA,EAAA;MACA,OAAA,IAAA,CAAA,KAAA,CAAA,eAAA,CAAA,KAAA,CAAA,IAAA;IACA;EACA,CAAA;EACA,OAAA,EAAA;IACA,YAAA,WAAA,YAAA,CAAA,CAAA,EAAA;MACA,IAAA,UAAA,GAAA,CAAA,CAAA,UAAA,IAAA,CAAA,CAAA,CAAA,MAAA,GAAA,EAAA;MACA,IAAA,cAAA,GAAA,IAAA,CAAA,aAAA;MACA,cAAA,CAAA,UAAA,GAAA,cAAA,CAAA,UAAA,GAAA,UAAA,GAAA,CAAA;IACA,CAAA;IACA,YAAA,WAAA,YAAA,CAAA,UAAA,EAAA;MACA,IAAA,UAAA,GAAA,IAAA,CAAA,KAAA,CAAA,eAAA,CAAA,GAAA;MACA,IAAA,eAAA,GAAA,UAAA,CAAA,WAAA;MACA,IAAA,cAAA,GAAA,IAAA,CAAA,aAAA;MACA,IAAA,OAAA,GAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA;MAEA,IAAA,QAAA,GAAA,IAAA;MACA,IAAA,OAAA,GAAA,IAAA;;MAEA;MACA,IAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA;QACA,QAAA,GAAA,OAAA,CAAA,CAAA,CAAA;QACA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA,MAAA,GAAA,CAAA,CAAA;MACA;MAEA,IAAA,QAAA,KAAA,UAAA,EAAA;QACA,cAAA,CAAA,UAAA,GAAA,CAAA;MACA,CAAA,MAAA,IAAA,OAAA,KAAA,UAAA,EAAA;QACA,cAAA,CAAA,UAAA,GAAA,cAAA,CAAA,WAAA,GAAA,eAAA;MACA,CAAA,MAAA;QACA;QACA,IAAA,YAAA,GAAA,OAAA,CAAA,SAAA,CAAA,UAAA,IAAA;UAAA,OAAA,IAAA,KAAA,UAAA;QAAA,EAAA;QACA,IAAA,OAAA,GAAA,OAAA,CAAA,YAAA,GAAA,CAAA,CAAA;QACA,IAAA,OAAA,GAAA,OAAA,CAAA,YAAA,GAAA,CAAA,CAAA;;QAEA;QACA,IAAA,sBAAA,GAAA,OAAA,CAAA,GAAA,CAAA,UAAA,GAAA,OAAA,CAAA,GAAA,CAAA,WAAA,GAAA,gBAAA;;QAEA;QACA,IAAA,uBAAA,GAAA,OAAA,CAAA,GAAA,CAAA,UAAA,GAAA,gBAAA;QAEA,IAAA,sBAAA,GAAA,cAAA,CAAA,UAAA,GAAA,eAAA,EAAA;UACA,cAAA,CAAA,UAAA,GAAA,sBAAA,GAAA,eAAA;QACA,CAAA,MAAA,IAAA,uBAAA,GAAA,cAAA,CAAA,UAAA,EAAA;UACA,cAAA,CAAA,UAAA,GAAA,uBAAA;QACA;MACA;IACA;EACA;AACA,CAAA","sourcesContent":["<template>\r\n  <el-scrollbar ref=\"scrollContainer\" :vertical=\"false\" class=\"scroll-container\" @wheel.native.prevent=\"handleScroll\">\r\n    <slot />\r\n  </el-scrollbar>\r\n</template>\r\n\r\n<script>\r\nconst tagAndTagSpacing = 4 // tagAndTagSpacing\r\n\r\nexport default {\r\n  name: 'ScrollPane',\r\n  data() {\r\n    return {\r\n      left: 0\r\n    }\r\n  },\r\n  computed: {\r\n    scrollWrapper() {\r\n      return this.$refs.scrollContainer.$refs.wrap\r\n    }\r\n  },\r\n  methods: {\r\n    handleScroll(e) {\r\n      const eventDelta = e.wheelDelta || -e.deltaY * 40\r\n      const $scrollWrapper = this.scrollWrapper\r\n      $scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4\r\n    },\r\n    moveToTarget(currentTag) {\r\n      const $container = this.$refs.scrollContainer.$el\r\n      const $containerWidth = $container.offsetWidth\r\n      const $scrollWrapper = this.scrollWrapper\r\n      const tagList = this.$parent.$refs.tag\r\n\r\n      let firstTag = null\r\n      let lastTag = null\r\n\r\n      // find first tag and last tag\r\n      if (tagList.length > 0) {\r\n        firstTag = tagList[0]\r\n        lastTag = tagList[tagList.length - 1]\r\n      }\r\n\r\n      if (firstTag === currentTag) {\r\n        $scrollWrapper.scrollLeft = 0\r\n      } else if (lastTag === currentTag) {\r\n        $scrollWrapper.scrollLeft = $scrollWrapper.scrollWidth - $containerWidth\r\n      } else {\r\n        // find preTag and nextTag\r\n        const currentIndex = tagList.findIndex(item => item === currentTag)\r\n        const prevTag = tagList[currentIndex - 1]\r\n        const nextTag = tagList[currentIndex + 1]\r\n\r\n        // the tag's offsetLeft after of nextTag\r\n        const afterNextTagOffsetLeft = nextTag.$el.offsetLeft + nextTag.$el.offsetWidth + tagAndTagSpacing\r\n\r\n        // the tag's offsetLeft before of prevTag\r\n        const beforePrevTagOffsetLeft = prevTag.$el.offsetLeft - tagAndTagSpacing\r\n\r\n        if (afterNextTagOffsetLeft > $scrollWrapper.scrollLeft + $containerWidth) {\r\n          $scrollWrapper.scrollLeft = afterNextTagOffsetLeft - $containerWidth\r\n        } else if (beforePrevTagOffsetLeft < $scrollWrapper.scrollLeft) {\r\n          $scrollWrapper.scrollLeft = beforePrevTagOffsetLeft\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.scroll-container {\r\n  white-space: nowrap;\r\n  position: relative;\r\n  overflow: hidden;\r\n  width: 100%;\r\n  /deep/ {\r\n    .el-scrollbar__bar {\r\n      bottom: 0px;\r\n    }\r\n    .el-scrollbar__wrap {\r\n      height: 49px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"sourceRoot":"src/layout/components/TagsView"}]}