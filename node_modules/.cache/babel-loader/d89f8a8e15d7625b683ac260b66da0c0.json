{"remainingRequest":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\babel-loader\\lib\\index.js!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\src\\permission.js","dependencies":[{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\src\\permission.js","mtime":1725789930870},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\babel.config.js","mtime":1725789930622},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/Language/Go/Project/Test/test/go_gateway_view/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nvar _regeneratorRuntime2 = _interopRequireDefault(require(\"E:/Language/Go/Project/Test/test/go_gateway_view/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\"));\nvar _objectSpread2 = _interopRequireDefault(require(\"E:/Language/Go/Project/Test/test/go_gateway_view/node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nrequire(\"regenerator-runtime/runtime\");\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"E:/Language/Go/Project/Test/test/go_gateway_view/node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));\nvar _router = _interopRequireDefault(require(\"./router\"));\nvar _store = _interopRequireDefault(require(\"./store\"));\nvar _elementUi = require(\"element-ui\");\nvar _nprogress = _interopRequireDefault(require(\"nprogress\"));\nrequire(\"nprogress/nprogress.css\");\nvar _auth = require(\"@/utils/auth\");\nvar _getPageTitle = _interopRequireDefault(require(\"@/utils/get-page-title\"));\n// progress bar\n// progress bar style\n// get token from cookie\n\n_nprogress.default.configure({\n  showSpinner: false\n}); // NProgress Configuration\n\nvar whiteList = ['/login', '/auth-redirect']; // no redirect whitelist\n\n_router.default.beforeEach(/*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2.default)(/*#__PURE__*/(0, _regeneratorRuntime2.default)().mark(function _callee(to, from, next) {\n    var hasToken, hasRoles, _yield$store$dispatch, roles, accessRoutes;\n    return (0, _regeneratorRuntime2.default)().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // start progress bar\n          _nprogress.default.start();\n\n          // set page title\n          document.title = (0, _getPageTitle.default)(to.meta.title);\n\n          // determine whether the user has logged in\n          hasToken = (0, _auth.getToken)();\n          if (!hasToken) {\n            _context.next = 35;\n            break;\n          }\n          if (!(to.path === '/login')) {\n            _context.next = 9;\n            break;\n          }\n          // if is logged in, redirect to the home page\n          next({\n            path: '/'\n          });\n          _nprogress.default.done();\n          _context.next = 33;\n          break;\n        case 9:\n          // determine whether the user has obtained his permission roles through getInfo\n          hasRoles = _store.default.getters.roles && _store.default.getters.roles.length > 0;\n          if (!hasRoles) {\n            _context.next = 14;\n            break;\n          }\n          next();\n          _context.next = 33;\n          break;\n        case 14:\n          _context.prev = 14;\n          _context.next = 17;\n          return _store.default.dispatch('user/getInfo');\n        case 17:\n          _yield$store$dispatch = _context.sent;\n          roles = _yield$store$dispatch.roles;\n          _context.next = 21;\n          return _store.default.dispatch('permission/generateRoutes', roles);\n        case 21:\n          accessRoutes = _context.sent;\n          // dynamically add accessible routes\n          _router.default.addRoutes(accessRoutes);\n\n          // hack method to ensure that addRoutes is complete\n          // set the replace: true, so the navigation will not leave a history record\n          next((0, _objectSpread2.default)((0, _objectSpread2.default)({}, to), {}, {\n            replace: true\n          }));\n          _context.next = 33;\n          break;\n        case 26:\n          _context.prev = 26;\n          _context.t0 = _context[\"catch\"](14);\n          _context.next = 30;\n          return _store.default.dispatch('user/resetToken');\n        case 30:\n          _elementUi.Message.error(_context.t0 || 'Has Error');\n          next(\"/login?redirect=\".concat(to.path));\n          _nprogress.default.done();\n        case 33:\n          _context.next = 36;\n          break;\n        case 35:\n          /* has no token*/\n\n          if (whiteList.indexOf(to.path) !== -1) {\n            // in the free login whitelist, go directly\n            next();\n          } else {\n            // other pages that do not have permission to access are redirected to the login page.\n            next(\"/login?redirect=\".concat(to.path));\n            _nprogress.default.done();\n          }\n        case 36:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[14, 26]]);\n  }));\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\n_router.default.afterEach(function () {\n  // finish progress bar\n  _nprogress.default.done();\n});",{"version":3,"names":["_router","_interopRequireDefault","require","_store","_elementUi","_nprogress","_auth","_getPageTitle","NProgress","configure","showSpinner","whiteList","router","beforeEach","_ref","_asyncToGenerator2","default","_regeneratorRuntime2","mark","_callee","to","from","next","hasToken","hasRoles","_yield$store$dispatch","roles","accessRoutes","wrap","_callee$","_context","prev","start","document","title","getPageTitle","meta","getToken","path","done","store","getters","length","dispatch","sent","addRoutes","_objectSpread2","replace","t0","Message","error","concat","indexOf","stop","_x","_x2","_x3","apply","arguments","afterEach"],"sources":["E:/Language/Go/Project/Test/test/go_gateway_view/src/permission.js"],"sourcesContent":["import router from './router'\r\nimport store from './store'\r\nimport { Message } from 'element-ui'\r\nimport NProgress from 'nprogress' // progress bar\r\nimport 'nprogress/nprogress.css' // progress bar style\r\nimport { getToken } from '@/utils/auth' // get token from cookie\r\nimport getPageTitle from '@/utils/get-page-title'\r\n\r\nNProgress.configure({ showSpinner: false }) // NProgress Configuration\r\n\r\nconst whiteList = ['/login', '/auth-redirect'] // no redirect whitelist\r\n\r\nrouter.beforeEach(async(to, from, next) => {\r\n  // start progress bar\r\n  NProgress.start()\r\n\r\n  // set page title\r\n  document.title = getPageTitle(to.meta.title)\r\n\r\n  // determine whether the user has logged in\r\n  const hasToken = getToken()\r\n\r\n  if (hasToken) {\r\n    if (to.path === '/login') {\r\n      // if is logged in, redirect to the home page\r\n      next({ path: '/' })\r\n      NProgress.done()\r\n    } else {\r\n      // determine whether the user has obtained his permission roles through getInfo\r\n      const hasRoles = store.getters.roles && store.getters.roles.length > 0\r\n      if (hasRoles) {\r\n        next()\r\n      } else {\r\n        try {\r\n          // get user info\r\n          // note: roles must be a object array! such as: ['admin'] or ,['developer','editor']\r\n          const { roles } = await store.dispatch('user/getInfo')\r\n\r\n          // generate accessible routes map based on roles\r\n          const accessRoutes = await store.dispatch('permission/generateRoutes', roles)\r\n\r\n          // dynamically add accessible routes\r\n          router.addRoutes(accessRoutes)\r\n\r\n          // hack method to ensure that addRoutes is complete\r\n          // set the replace: true, so the navigation will not leave a history record\r\n          next({ ...to, replace: true })\r\n        } catch (error) {\r\n          // remove token and go to login page to re-login\r\n          await store.dispatch('user/resetToken')\r\n          Message.error(error || 'Has Error')\r\n          next(`/login?redirect=${to.path}`)\r\n          NProgress.done()\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    /* has no token*/\r\n\r\n    if (whiteList.indexOf(to.path) !== -1) {\r\n      // in the free login whitelist, go directly\r\n      next()\r\n    } else {\r\n      // other pages that do not have permission to access are redirected to the login page.\r\n      next(`/login?redirect=${to.path}`)\r\n      NProgress.done()\r\n    }\r\n  }\r\n})\r\n\r\nrouter.afterEach(() => {\r\n  // finish progress bar\r\n  NProgress.done()\r\n})\r\n"],"mappings":"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","ignoreList":[]}]}