{"remainingRequest":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\babel-loader\\lib\\index.js!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\src\\filters\\index.js","dependencies":[{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\src\\filters\\index.js","mtime":1725789930806},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\babel.config.js","mtime":1725789930622},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\Language\\Go\\Project\\Test\\test\\go_gateway_view\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"formatTime\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.formatTime;\n  }\n});\nexports.numberFormatter = numberFormatter;\nObject.defineProperty(exports, \"parseTime\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.parseTime;\n  }\n});\nexports.timeAgo = timeAgo;\nexports.toThousandFilter = toThousandFilter;\nexports.uppercaseFirst = uppercaseFirst;\nrequire(\"core-js/modules/es6.regexp.to-string\");\nrequire(\"core-js/modules/es6.regexp.replace\");\nrequire(\"core-js/modules/es6.number.constructor\");\nvar _utils = require(\"@/utils\");\n// import parseTime, formatTime and set to filter\n\n/**\r\n * Show plural label if time is plural number\r\n * @param {number} time\r\n * @param {string} label\r\n * @return {string}\r\n */\nfunction pluralize(time, label) {\n  if (time === 1) {\n    return time + label;\n  }\n  return time + label + 's';\n}\n\n/**\r\n * @param {number} time\r\n */\nfunction timeAgo(time) {\n  var between = Date.now() / 1000 - Number(time);\n  if (between < 3600) {\n    return pluralize(~~(between / 60), ' minute');\n  } else if (between < 86400) {\n    return pluralize(~~(between / 3600), ' hour');\n  } else {\n    return pluralize(~~(between / 86400), ' day');\n  }\n}\n\n/**\r\n * Number formatting\r\n * like 10000 => 10k\r\n * @param {number} num\r\n * @param {number} digits\r\n */\nfunction numberFormatter(num, digits) {\n  var si = [{\n    value: 1E18,\n    symbol: 'E'\n  }, {\n    value: 1E15,\n    symbol: 'P'\n  }, {\n    value: 1E12,\n    symbol: 'T'\n  }, {\n    value: 1E9,\n    symbol: 'G'\n  }, {\n    value: 1E6,\n    symbol: 'M'\n  }, {\n    value: 1E3,\n    symbol: 'k'\n  }];\n  for (var i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value).toFixed(digits).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + si[i].symbol;\n    }\n  }\n  return num.toString();\n}\n\n/**\r\n * 10000 => \"10,000\"\r\n * @param {number} num\r\n */\nfunction toThousandFilter(num) {\n  return (+num || 0).toString().replace(/^-?\\d+/g, function (m) {\n    return m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ',');\n  });\n}\n\n/**\r\n * Upper case first char\r\n * @param {String} string\r\n */\nfunction uppercaseFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}",{"version":3,"names":["_utils","require","pluralize","time","label","timeAgo","between","Date","now","Number","numberFormatter","num","digits","si","value","symbol","i","length","toFixed","replace","toString","toThousandFilter","m","uppercaseFirst","string","charAt","toUpperCase","slice"],"sources":["E:/Language/Go/Project/Test/test/go_gateway_view/src/filters/index.js"],"sourcesContent":["// import parseTime, formatTime and set to filter\r\nexport { parseTime, formatTime } from '@/utils'\r\n\r\n/**\r\n * Show plural label if time is plural number\r\n * @param {number} time\r\n * @param {string} label\r\n * @return {string}\r\n */\r\nfunction pluralize(time, label) {\r\n  if (time === 1) {\r\n    return time + label\r\n  }\r\n  return time + label + 's'\r\n}\r\n\r\n/**\r\n * @param {number} time\r\n */\r\nexport function timeAgo(time) {\r\n  const between = Date.now() / 1000 - Number(time)\r\n  if (between < 3600) {\r\n    return pluralize(~~(between / 60), ' minute')\r\n  } else if (between < 86400) {\r\n    return pluralize(~~(between / 3600), ' hour')\r\n  } else {\r\n    return pluralize(~~(between / 86400), ' day')\r\n  }\r\n}\r\n\r\n/**\r\n * Number formatting\r\n * like 10000 => 10k\r\n * @param {number} num\r\n * @param {number} digits\r\n */\r\nexport function numberFormatter(num, digits) {\r\n  const si = [\r\n    { value: 1E18, symbol: 'E' },\r\n    { value: 1E15, symbol: 'P' },\r\n    { value: 1E12, symbol: 'T' },\r\n    { value: 1E9, symbol: 'G' },\r\n    { value: 1E6, symbol: 'M' },\r\n    { value: 1E3, symbol: 'k' }\r\n  ]\r\n  for (let i = 0; i < si.length; i++) {\r\n    if (num >= si[i].value) {\r\n      return (num / si[i].value).toFixed(digits).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + si[i].symbol\r\n    }\r\n  }\r\n  return num.toString()\r\n}\r\n\r\n/**\r\n * 10000 => \"10,000\"\r\n * @param {number} num\r\n */\r\nexport function toThousandFilter(num) {\r\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\r\n}\r\n\r\n/**\r\n * Upper case first char\r\n * @param {String} string\r\n */\r\nexport function uppercaseFirst(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC9B,IAAID,IAAI,KAAK,CAAC,EAAE;IACd,OAAOA,IAAI,GAAGC,KAAK;EACrB;EACA,OAAOD,IAAI,GAAGC,KAAK,GAAG,GAAG;AAC3B;;AAEA;AACA;AACA;AACO,SAASC,OAAOA,CAACF,IAAI,EAAE;EAC5B,IAAMG,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAGC,MAAM,CAACN,IAAI,CAAC;EAChD,IAAIG,OAAO,GAAG,IAAI,EAAE;IAClB,OAAOJ,SAAS,CAAC,CAAC,EAAEI,OAAO,GAAG,EAAE,CAAC,EAAE,SAAS,CAAC;EAC/C,CAAC,MAAM,IAAIA,OAAO,GAAG,KAAK,EAAE;IAC1B,OAAOJ,SAAS,CAAC,CAAC,EAAEI,OAAO,GAAG,IAAI,CAAC,EAAE,OAAO,CAAC;EAC/C,CAAC,MAAM;IACL,OAAOJ,SAAS,CAAC,CAAC,EAAEI,OAAO,GAAG,KAAK,CAAC,EAAE,MAAM,CAAC;EAC/C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASI,eAAeA,CAACC,GAAG,EAAEC,MAAM,EAAE;EAC3C,IAAMC,EAAE,GAAG,CACT;IAAEC,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC5B;IAAED,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC5B;IAAED,KAAK,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC5B;IAAED,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC3B;IAAED,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC,EAC3B;IAAED,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC,CAC5B;EACD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,EAAE,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAClC,IAAIL,GAAG,IAAIE,EAAE,CAACG,CAAC,CAAC,CAACF,KAAK,EAAE;MACtB,OAAO,CAACH,GAAG,GAAGE,EAAE,CAACG,CAAC,CAAC,CAACF,KAAK,EAAEI,OAAO,CAACN,MAAM,CAAC,CAACO,OAAO,CAAC,0BAA0B,EAAE,IAAI,CAAC,GAAGN,EAAE,CAACG,CAAC,CAAC,CAACD,MAAM;IACrG;EACF;EACA,OAAOJ,GAAG,CAACS,QAAQ,CAAC,CAAC;AACvB;;AAEA;AACA;AACA;AACA;AACO,SAASC,gBAAgBA,CAACV,GAAG,EAAE;EACpC,OAAO,CAAC,CAACA,GAAG,IAAI,CAAC,EAAES,QAAQ,CAAC,CAAC,CAACD,OAAO,CAAC,SAAS,EAAE,UAAAG,CAAC;IAAA,OAAIA,CAAC,CAACH,OAAO,CAAC,sBAAsB,EAAE,GAAG,CAAC;EAAA,EAAC;AAC/F;;AAEA;AACA;AACA;AACA;AACO,SAASI,cAAcA,CAACC,MAAM,EAAE;EACrC,OAAOA,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC;AACzD","ignoreList":[]}]}